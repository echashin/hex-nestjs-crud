import { ClassConstructor } from "class-transformer";
import { DeepPartial, Repository } from "typeorm";
import { ImportDto } from "../dto/import.dto";
import { Pageable } from "../dto/pageable.dto";
import { CrudRequest } from "../interfaces/crud-request.interface";
import { GetManyDefaultResponse } from "../interfaces/get-many-default-response.interface";
import { JoinOptions } from "../interfaces/query-options.interface";
export declare class TypeOrmCrudService<T extends {
    id?: string;
}> {
    protected readonly repository: Repository<T>;
    private entityColumns;
    private entityPrimaryColumns;
    private entityColumnsHash;
    private entityRelationsHash;
    private select;
    private join;
    private exclude;
    constructor(repository: Repository<T>, join?: JoinOptions);
    get findOne(): Repository<T>["findOne"];
    get find(): Repository<T>["find"];
    get count(): Repository<T>["count"];
    getMany(req: CrudRequest, langCode: string): Promise<GetManyDefaultResponse<T> | T[]>;
    getOne(req: CrudRequest, langCode: string): Promise<T>;
    delete(ids: string | string[]): Promise<number>;
    recover(id: string): Promise<T>;
    softDelete(ids: string | string[]): Promise<number>;
    create(input: DeepPartial<T>): Promise<T>;
    update(id: string, input: DeepPartial<T>): Promise<T>;
    private decidePagination;
    private get entityType();
    private get alias();
    private createBuilder;
    private doGetMany;
    private onInitMapEntityColumns;
    private onInitMapRelations;
    private getOneOrFail;
    private getAllowedColumns;
    private getRelationMetadata;
    private setJoin;
    private setAndWhere;
    private setOrWhere;
    private setSearchCondition;
    private builderAddBrackets;
    private builderSetWhere;
    private setSearchFieldObjectCondition;
    private getSelect;
    private getSort;
    private getFieldWithAlias;
    private addLanguageToField;
    private mapSort;
    private mapOperatorsToQuery;
    private checkFilterIsArray;
    import<I extends object>(inputCls: ClassConstructor<I>, data: I[]): Promise<ImportDto>;
    crudGetOne(id: string, langCode: string, req?: CrudRequest): Promise<T>;
    crudGetMany(req: CrudRequest, langCode: string): Promise<Pageable<T>>;
    private throwBadRequestException;
    private throwNotFoundException;
    private throwInternalServerException;
    private createPageInfo;
    private getTake;
    private getSkip;
}
//# sourceMappingURL=typeorm-crud.service.d.ts.map